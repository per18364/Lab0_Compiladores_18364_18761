# Generated from yapl.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,39,262,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,
        0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
        7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,
        14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,
        18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,
        21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
        23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,
        26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,
        28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,
        31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,199,8,
        32,1,32,5,32,202,8,32,10,32,12,32,205,9,32,1,32,1,32,1,33,4,33,210,
        8,33,11,33,12,33,211,1,34,1,34,5,34,216,8,34,10,34,12,34,219,9,34,
        1,35,1,35,5,35,223,8,35,10,35,12,35,226,9,35,1,36,4,36,229,8,36,
        11,36,12,36,230,1,36,1,36,1,37,1,37,1,37,1,37,1,37,5,37,240,8,37,
        10,37,12,37,243,9,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,
        5,38,254,8,38,10,38,12,38,257,9,38,1,38,1,38,1,38,1,38,2,241,255,
        0,39,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
        35,71,36,73,37,75,38,77,39,1,0,8,8,0,34,34,47,47,92,92,98,98,102,
        102,110,110,114,114,116,116,3,0,48,57,65,70,97,102,2,0,34,34,92,
        92,1,0,48,57,1,0,65,90,4,0,48,57,65,90,95,95,97,122,1,0,97,122,3,
        0,9,10,12,13,32,32,271,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
        0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
        0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
        0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,
        0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,
        0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,
        0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,
        0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,
        0,0,0,1,79,1,0,0,0,3,81,1,0,0,0,5,83,1,0,0,0,7,85,1,0,0,0,9,87,1,
        0,0,0,11,89,1,0,0,0,13,91,1,0,0,0,15,93,1,0,0,0,17,96,1,0,0,0,19,
        98,1,0,0,0,21,100,1,0,0,0,23,102,1,0,0,0,25,104,1,0,0,0,27,106,1,
        0,0,0,29,108,1,0,0,0,31,110,1,0,0,0,33,112,1,0,0,0,35,114,1,0,0,
        0,37,120,1,0,0,0,39,125,1,0,0,0,41,131,1,0,0,0,43,134,1,0,0,0,45,
        137,1,0,0,0,47,140,1,0,0,0,49,149,1,0,0,0,51,156,1,0,0,0,53,161,
        1,0,0,0,55,166,1,0,0,0,57,171,1,0,0,0,59,177,1,0,0,0,61,181,1,0,
        0,0,63,185,1,0,0,0,65,190,1,0,0,0,67,209,1,0,0,0,69,213,1,0,0,0,
        71,220,1,0,0,0,73,228,1,0,0,0,75,234,1,0,0,0,77,249,1,0,0,0,79,80,
        5,59,0,0,80,2,1,0,0,0,81,82,5,123,0,0,82,4,1,0,0,0,83,84,5,125,0,
        0,84,6,1,0,0,0,85,86,5,40,0,0,86,8,1,0,0,0,87,88,5,44,0,0,88,10,
        1,0,0,0,89,90,5,41,0,0,90,12,1,0,0,0,91,92,5,58,0,0,92,14,1,0,0,
        0,93,94,5,60,0,0,94,95,5,45,0,0,95,16,1,0,0,0,96,97,5,64,0,0,97,
        18,1,0,0,0,98,99,5,46,0,0,99,20,1,0,0,0,100,101,5,42,0,0,101,22,
        1,0,0,0,102,103,5,47,0,0,103,24,1,0,0,0,104,105,5,43,0,0,105,26,
        1,0,0,0,106,107,5,45,0,0,107,28,1,0,0,0,108,109,5,61,0,0,109,30,
        1,0,0,0,110,111,5,60,0,0,111,32,1,0,0,0,112,113,5,126,0,0,113,34,
        1,0,0,0,114,115,5,99,0,0,115,116,5,108,0,0,116,117,5,97,0,0,117,
        118,5,115,0,0,118,119,5,115,0,0,119,36,1,0,0,0,120,121,5,101,0,0,
        121,122,5,108,0,0,122,123,5,115,0,0,123,124,5,101,0,0,124,38,1,0,
        0,0,125,126,5,102,0,0,126,127,5,97,0,0,127,128,5,108,0,0,128,129,
        5,115,0,0,129,130,5,101,0,0,130,40,1,0,0,0,131,132,5,102,0,0,132,
        133,5,105,0,0,133,42,1,0,0,0,134,135,5,105,0,0,135,136,5,102,0,0,
        136,44,1,0,0,0,137,138,5,105,0,0,138,139,5,110,0,0,139,46,1,0,0,
        0,140,141,5,105,0,0,141,142,5,110,0,0,142,143,5,104,0,0,143,144,
        5,101,0,0,144,145,5,114,0,0,145,146,5,105,0,0,146,147,5,116,0,0,
        147,148,5,115,0,0,148,48,1,0,0,0,149,150,5,105,0,0,150,151,5,115,
        0,0,151,152,5,118,0,0,152,153,5,111,0,0,153,154,5,105,0,0,154,155,
        5,100,0,0,155,50,1,0,0,0,156,157,5,108,0,0,157,158,5,111,0,0,158,
        159,5,111,0,0,159,160,5,112,0,0,160,52,1,0,0,0,161,162,5,112,0,0,
        162,163,5,111,0,0,163,164,5,111,0,0,164,165,5,108,0,0,165,54,1,0,
        0,0,166,167,5,116,0,0,167,168,5,104,0,0,168,169,5,101,0,0,169,170,
        5,110,0,0,170,56,1,0,0,0,171,172,5,119,0,0,172,173,5,104,0,0,173,
        174,5,105,0,0,174,175,5,108,0,0,175,176,5,101,0,0,176,58,1,0,0,0,
        177,178,5,110,0,0,178,179,5,101,0,0,179,180,5,119,0,0,180,60,1,0,
        0,0,181,182,5,110,0,0,182,183,5,111,0,0,183,184,5,116,0,0,184,62,
        1,0,0,0,185,186,5,116,0,0,186,187,5,114,0,0,187,188,5,117,0,0,188,
        189,5,101,0,0,189,64,1,0,0,0,190,203,5,34,0,0,191,198,5,92,0,0,192,
        199,7,0,0,0,193,194,5,117,0,0,194,195,7,1,0,0,195,196,7,1,0,0,196,
        197,7,1,0,0,197,199,7,1,0,0,198,192,1,0,0,0,198,193,1,0,0,0,199,
        202,1,0,0,0,200,202,8,2,0,0,201,191,1,0,0,0,201,200,1,0,0,0,202,
        205,1,0,0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,206,1,0,0,0,205,
        203,1,0,0,0,206,207,5,34,0,0,207,66,1,0,0,0,208,210,7,3,0,0,209,
        208,1,0,0,0,210,211,1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,
        68,1,0,0,0,213,217,7,4,0,0,214,216,7,5,0,0,215,214,1,0,0,0,216,219,
        1,0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,70,1,0,0,0,219,217,1,
        0,0,0,220,224,7,6,0,0,221,223,7,5,0,0,222,221,1,0,0,0,223,226,1,
        0,0,0,224,222,1,0,0,0,224,225,1,0,0,0,225,72,1,0,0,0,226,224,1,0,
        0,0,227,229,7,7,0,0,228,227,1,0,0,0,229,230,1,0,0,0,230,228,1,0,
        0,0,230,231,1,0,0,0,231,232,1,0,0,0,232,233,6,36,0,0,233,74,1,0,
        0,0,234,235,5,40,0,0,235,236,5,42,0,0,236,241,1,0,0,0,237,240,3,
        75,37,0,238,240,9,0,0,0,239,237,1,0,0,0,239,238,1,0,0,0,240,243,
        1,0,0,0,241,242,1,0,0,0,241,239,1,0,0,0,242,244,1,0,0,0,243,241,
        1,0,0,0,244,245,5,42,0,0,245,246,5,41,0,0,246,247,1,0,0,0,247,248,
        6,37,1,0,248,76,1,0,0,0,249,250,5,45,0,0,250,251,5,45,0,0,251,255,
        1,0,0,0,252,254,9,0,0,0,253,252,1,0,0,0,254,257,1,0,0,0,255,256,
        1,0,0,0,255,253,1,0,0,0,256,258,1,0,0,0,257,255,1,0,0,0,258,259,
        5,10,0,0,259,260,1,0,0,0,260,261,6,38,1,0,261,78,1,0,0,0,11,0,198,
        201,203,211,217,224,230,239,241,255,2,6,0,0,0,1,0
    ]

class yaplLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    CLASS = 18
    ELSE = 19
    FALSE = 20
    FI = 21
    IF = 22
    IN = 23
    INHERITS = 24
    ISVOID = 25
    LOOP = 26
    POOL = 27
    THEN = 28
    WHILE = 29
    NEW = 30
    NOT = 31
    TRUE = 32
    STRING = 33
    INT = 34
    TYPE = 35
    ID = 36
    WHITESPACE = 37
    BLOCK_COMMENT = 38
    LINE_COMMENT = 39

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'{'", "'}'", "'('", "','", "')'", "':'", "'<-'", "'@'", 
            "'.'", "'*'", "'/'", "'+'", "'-'", "'='", "'<'", "'~'", "'class'", 
            "'else'", "'false'", "'fi'", "'if'", "'in'", "'inherits'", "'isvoid'", 
            "'loop'", "'pool'", "'then'", "'while'", "'new'", "'not'", "'true'" ]

    symbolicNames = [ "<INVALID>",
            "CLASS", "ELSE", "FALSE", "FI", "IF", "IN", "INHERITS", "ISVOID", 
            "LOOP", "POOL", "THEN", "WHILE", "NEW", "NOT", "TRUE", "STRING", 
            "INT", "TYPE", "ID", "WHITESPACE", "BLOCK_COMMENT", "LINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "CLASS", "ELSE", "FALSE", "FI", 
                  "IF", "IN", "INHERITS", "ISVOID", "LOOP", "POOL", "THEN", 
                  "WHILE", "NEW", "NOT", "TRUE", "STRING", "INT", "TYPE", 
                  "ID", "WHITESPACE", "BLOCK_COMMENT", "LINE_COMMENT" ]

    grammarFileName = "yapl.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


